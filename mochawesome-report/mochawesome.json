{
  "stats": {
    "suites": 4,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-22T23:52:02.380Z",
    "end": "2019-05-22T23:52:03.028Z",
    "duration": 648,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e9ef1b94-c898-40f5-9366-15926ecee06d",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "3abc3540-30fd-4890-9d02-d3c16955e83f",
        "title": "Account.vue",
        "fullFile": "C:\\Users\\joaquin\\Desktop\\Certificacion1\\CertiFinal\\dist\\main.js",
        "file": "\\dist\\main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Account.vue \"before each\" hook",
            "timedOut": false,
            "duration": 16,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mutations = {\n  setCurrentAccount(context, currentAccount) {\n    context.CURRENT_ACCOUNT = currentAccount\n  },\n  addAccount(context, newAccount) {\n    context.ACCOUNTS.push(newAccount)\n  },\n  deleteAccount(context, accountId) {\n    context.ACCOUNTS.forEach(function(element) {\n      const indexofElement = context.ACCOUNTS.indexOf(element)\n      if (element.id === accountId) {\n        context.ACCOUNTS.splice(indexofElement, 1)\n      }\n    })\n  },\n  addIncomeCategory(context, newCategory) {\n    context.INCOME_CATEGORIES.push(newCategory)\n  },\n  addExpenseCategory(context, newCategory) {\n    context.EXPENSE_CATEGORIES.push(newCategory)\n  },\n  addExpense(context, newExpense) {\n    context.EXPENSES.push(newExpense)\n  },\n  addIncome(context, newIncome) {\n    context.INCOMES.push(newIncome)\n  },\n  editIncome(context, editedIncome) {\n    console.log(editedIncome)\n    context.INCOMES.forEach(\n        function(element) {\n          const indexofElement = context.INCOMES.indexOf(element)\n          if (element.name === editedIncome.oldName) {\n            context.INCOMES[indexofElement].name = editedIncome.name\n            context.INCOMES[indexofElement].category = editedIncome.category\n            context.INCOMES[indexofElement].amount = editedIncome.amount\n          }\n        })\n  },\n  editExpense(context, editedExpense) {\n    context.EXPENSES.forEach(\n        function(element) {\n          const indexofElement = context.EXPENSES.indexOf(element)\n          if (element.name === editedExpense.oldName) {\n            context.EXPENSES[indexofElement].name = editedExpense.name\n            context.EXPENSES[indexofElement].category =\n            editedExpense.category\n            context.EXPENSES[indexofElement].amount = editedExpense.amount\n          }\n        })\n  },\n  editAccount(context, accountName, editedAccount) {\n    context.ACCOUNTS.forEach(\n        function(element) {\n          const indexofElement = context.ACCOUNTS.indexOf(element)\n          if (element.name === accountName) {\n            context.ACCOUNTS[indexofElement].name = editedAccount.name\n            context.ACCOUNTS[indexofElement].description =\n            editedAccount.description\n          }\n        })\n  },\n  deleteIncome(context, incomeName) {\n    context.INCOMES.forEach(\n        function(element) {\n          const indexofElement = context.INCOME_CATEGORIES.indexOf(element)\n          if (element.name === incomeName) {\n            context.INCOMES.splice(indexofElement, 1)\n          }\n        }\n    )\n  },\n  deleteExpense(context, expenseName) {\n    context.EXPENSES.forEach(\n        function(element) {\n          const indexofElement = context.EXPENSES.indexOf(element)\n          if (element.name === expenseName) {\n            context.EXPENSES.splice(indexofElement, 1)\n          }\n        }\n    )\n  },\n  deleteIncomeCategory(context, categoryName) {\n    context.INCOME_CATEGORIES.forEach(\n        function(element) {\n          const indexofElement = context.INCOME_CATEGORIES.indexOf(element)\n          if (element.name === categoryName) {\n            context.INCOME_CATEGORIES.splice(indexofElement, 1)\n          }\n        }\n    )\n  },\n  deleteExpenseCategory(context, categoryName) {\n    context.EXPENSE_CATEGORIES.forEach(\n        function(element) {\n          const indexofElement = context.EXPENSE_CATEGORIES.indexOf(element)\n          if (element.name === categoryName) {\n            context.EXPENSE_CATEGORIES.splice(indexofElement, 1)\n          }\n        }\n    )\n  },\n  saveAllData() {\n    window.localStorage.clear()\n    window.localStorage.setItem('storage', JSON.stringify(state))\n    console.log(window.localStorage.length)\n  },\n  eraseAllData() {\n    window.localStorage.clear()\n  },\n  increment() {\n    state.count = state.count + 1\n  },\n}\nactions =\n  {\n    setCurrentAccount(context, currentAccount) {\n      context.commit('setCurrentAccount', currentAccount)\n    },\n    addAccount(context, newAccount) {\n      context.commit('addAccount', newAccount)\n    },\n    deleteAccount(context, accountName) {\n      context.commit('deleteAccount', accountName)\n    },\n    addIncomeCategory(context, newCategory) {\n      context.commit('addIncomeCategory', newCategory)\n    },\n    addExpenseCategory(context, newCategory) {\n      context.commit('addExpenseCategory', newCategory)\n    },\n    addIncome(context, newIncome) {\n      context.commit('addIncome', newIncome)\n    },\n    addExpense(context, newExpense) {\n      context.commit('addExpense', newExpense)\n    },\n    editIncome(context, editedIncome) {\n      context.commit('editIncome', editedIncome)\n    },\n    editExpense(context, editedExpense) {\n      context.commit('editExpense', editedExpense)\n    },\n    editAccount(context, accountName, editedAccount) {\n      context.commit('editAccount', accountName, editedAccount)\n    },\n    deleteIncome(context, incomeName) {\n      context.commit('deleteIncome', incomeName)\n    },\n    deleteExpense(context, expenseName) {\n      context.commit('deleteExpense', expenseName)\n    },\n    deleteIncomeCategory(context, categoryName) {\n      context.commit('deleteIncomeCategory', categoryName)\n    },\n    deleteExpenseCategory(context, categoryName) {\n      context.commit('deleteExpenseCategory', categoryName)\n    },\n    saveAllData() {\n      mutations.saveAllData()\n    },\n    eraseAllData() {\n      mutations.eraseAllData()\n    },\n  }\nstate = {\n  ACCOUNTS: [],\n  EXPENSE_CATEGORIES: [{ name: 'Add...' },\n    { name: 'Expenses' }, { name: 'Transference' }, { name: 'Other' }],\n  INCOME_CATEGORIES: [{ name: 'Add...' },\n    { name: 'Salary' }, { name: 'Other' }],\n  INCOMES: [],\n  EXPENSES: [],\n  CURRENT_ITEM: { name: '' },\n  CURRENT_ACCOUNT: {},\n  count: 0,\n}\nstore = new vuex__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Store({\n  actions, state, mutations,\n})\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_1__[\"shallowMount\"])(_components_Account_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"], { store, localVue })",
            "err": {},
            "isRoot": false,
            "uuid": "2e5f0519-074f-45d5-bcb7-c7a293895297",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Account has 3 buttons: add, edit, delete",
            "fullTitle": "Account.vue Account has 3 buttons: add, edit, delete",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const buttonArray = wrapper.findAll('button')\nconst firstButton = buttonArray.at(1)\nconst secondButton = buttonArray.at(2)\nconst thirdButton = buttonArray.at(3)\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(buttonArray.length).to.equal(4)\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(firstButton.text()).to.equal('Add')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(secondButton.text()).to.equal('Edit')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(thirdButton.text()).to.equal('Delete')",
            "err": {},
            "isRoot": false,
            "uuid": "a84a8ea6-045c-4fd2-9f78-14d01660fe77",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Table has 2 columns: name, description",
            "fullTitle": "Account.vue Table has 2 columns: name, description",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const fieldArray = wrapper.vm.fields\nconst firstColumn = fieldArray[0]\nconst secondColumn = fieldArray[1]\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(fieldArray.length).to.equal(2)\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(firstColumn.value).to.equal('name')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(secondColumn.value).to.equal('description')",
            "err": {},
            "isRoot": false,
            "uuid": "f7efdaad-fb30-41fd-8d69-3380fe7cc622",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "At button click, at least 1 object exists in array",
            "fullTitle": "Account.vue At button click, at least 1 object exists in array",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const initialLength = wrapper.vm.accountArray.length\nwrapper.find('button.add')\nwrapper.vm.add(object)\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(wrapper.vm.accountArray.length).to.equal(initialLength + 1)",
            "err": {},
            "isRoot": false,
            "uuid": "c49f1f82-b2f6-4477-86df-e01251e6bdec",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a84a8ea6-045c-4fd2-9f78-14d01660fe77",
          "f7efdaad-fb30-41fd-8d69-3380fe7cc622",
          "c49f1f82-b2f6-4477-86df-e01251e6bdec"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ddcadc33-7f57-4646-9b80-bb22809490e1",
        "title": "mutations",
        "fullFile": "C:\\Users\\joaquin\\Desktop\\Certificacion1\\CertiFinal\\dist\\main.js",
        "file": "\\dist\\main.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Mutations are Testable",
            "fullTitle": "mutations Mutations are Testable",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "increment()\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(_store_js__WEBPACK_IMPORTED_MODULE_1__[\"state\"].count).to.equal(1)",
            "err": {},
            "isRoot": false,
            "uuid": "b950fff9-ec0e-4977-aaf7-b383b19ee876",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "add INCOME ",
            "fullTitle": "mutations add INCOME ",
            "timedOut": false,
            "duration": 140,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const income = { name: 'income', amount: '10' }\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].isEmpty(_store_js__WEBPACK_IMPORTED_MODULE_1__[\"state\"].INCOMES, 'Array de Incomes vacio')\naddIncome(_store_js__WEBPACK_IMPORTED_MODULE_1__[\"state\"], income)\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].isNotEmpty(_store_js__WEBPACK_IMPORTED_MODULE_1__[\"state\"].INCOMES, 'Array de Incomes vacio')",
            "err": {},
            "isRoot": false,
            "uuid": "a0a1b373-9e0e-4008-a753-745bc228d669",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Local Storage Data Saving",
            "fullTitle": "mutations Local Storage Data Saving",
            "timedOut": false,
            "duration": 125,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const income = { name: 'income', amount: '10' }\naddIncome(_store_js__WEBPACK_IMPORTED_MODULE_1__[\"state\"], income)\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(window.localStorage.length).to.equal(0)\nsaveAllData()\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(window.localStorage.length).to.equal(1)",
            "err": {},
            "isRoot": false,
            "uuid": "370488db-d7e2-4841-b657-9b767108552d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Local Storage Data clearing",
            "fullTitle": "mutations Local Storage Data clearing",
            "timedOut": false,
            "duration": 109,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const income = { name: 'income', amount: '10' }\naddIncome(_store_js__WEBPACK_IMPORTED_MODULE_1__[\"state\"], income)\nsaveAllData()\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(window.localStorage.length).to.equal(1)\neraseAllData()\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(window.localStorage.length).to.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "7bb66a86-1320-42d3-b6fc-79516d63a3a1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b950fff9-ec0e-4977-aaf7-b383b19ee876",
          "a0a1b373-9e0e-4008-a753-745bc228d669",
          "370488db-d7e2-4841-b657-9b767108552d",
          "7bb66a86-1320-42d3-b6fc-79516d63a3a1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 374,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "523d21bc-e4f1-4d40-b022-f88b77ff4cf1",
        "title": "IncExpForm.vue",
        "fullFile": "C:\\Users\\joaquin\\Desktop\\Certificacion1\\CertiFinal\\dist\\main.js",
        "file": "\\dist\\main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "IncExpForm.vue \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mutations = {\n  setCurrentAccount(context, currentAccount) {\n    context.CURRENT_ACCOUNT = currentAccount\n  },\n  addAccount(context, newAccount) {\n    context.ACCOUNTS.push(newAccount)\n  },\n  deleteAccount(context, accountId) {\n    context.ACCOUNTS.forEach(function(element) {\n      const indexofElement = context.ACCOUNTS.indexOf(element)\n      if (element.id === accountId) {\n        context.ACCOUNTS.splice(indexofElement, 1)\n      }\n    })\n  },\n  addIncomeCategory(context, newCategory) {\n    context.INCOME_CATEGORIES.push(newCategory)\n  },\n  addExpenseCategory(context, newCategory) {\n    context.EXPENSE_CATEGORIES.push(newCategory)\n  },\n  addExpense(context, newExpense) {\n    context.EXPENSES.push(newExpense)\n  },\n  addIncome(context, newIncome) {\n    context.INCOMES.push(newIncome)\n  },\n  editIncome(context, editedIncome) {\n    console.log(editedIncome)\n    context.INCOMES.forEach(\n        function(element) {\n          const indexofElement = context.INCOMES.indexOf(element)\n          if (element.name === editedIncome.oldName) {\n            context.INCOMES[indexofElement].name = editedIncome.name\n            context.INCOMES[indexofElement].category = editedIncome.category\n            context.INCOMES[indexofElement].amount = editedIncome.amount\n          }\n        })\n  },\n  editExpense(context, editedExpense) {\n    context.EXPENSES.forEach(\n        function(element) {\n          const indexofElement = context.EXPENSES.indexOf(element)\n          if (element.name === editedExpense.oldName) {\n            context.EXPENSES[indexofElement].name = editedExpense.name\n            context.EXPENSES[indexofElement].category =\n            editedExpense.category\n            context.EXPENSES[indexofElement].amount = editedExpense.amount\n          }\n        })\n  },\n  editAccount(context, accountName, editedAccount) {\n    context.ACCOUNTS.forEach(\n        function(element) {\n          const indexofElement = context.ACCOUNTS.indexOf(element)\n          if (element.name === accountName) {\n            context.ACCOUNTS[indexofElement].name = editedAccount.name\n            context.ACCOUNTS[indexofElement].description =\n            editedAccount.description\n          }\n        })\n  },\n  deleteIncome(context, incomeName) {\n    context.INCOMES.forEach(\n        function(element) {\n          const indexofElement = context.INCOME_CATEGORIES.indexOf(element)\n          if (element.name === incomeName) {\n            context.INCOMES.splice(indexofElement, 1)\n          }\n        }\n    )\n  },\n  deleteExpense(context, expenseName) {\n    context.EXPENSES.forEach(\n        function(element) {\n          const indexofElement = context.EXPENSES.indexOf(element)\n          if (element.name === expenseName) {\n            context.EXPENSES.splice(indexofElement, 1)\n          }\n        }\n    )\n  },\n  deleteIncomeCategory(context, categoryName) {\n    context.INCOME_CATEGORIES.forEach(\n        function(element) {\n          const indexofElement = context.INCOME_CATEGORIES.indexOf(element)\n          if (element.name === categoryName) {\n            context.INCOME_CATEGORIES.splice(indexofElement, 1)\n          }\n        }\n    )\n  },\n  deleteExpenseCategory(context, categoryName) {\n    context.EXPENSE_CATEGORIES.forEach(\n        function(element) {\n          const indexofElement = context.EXPENSE_CATEGORIES.indexOf(element)\n          if (element.name === categoryName) {\n            context.EXPENSE_CATEGORIES.splice(indexofElement, 1)\n          }\n        }\n    )\n  },\n  saveAllData() {\n    window.localStorage.clear()\n    window.localStorage.setItem('storage', JSON.stringify(state))\n    console.log(window.localStorage.length)\n  },\n  eraseAllData() {\n    window.localStorage.clear()\n  },\n  increment() {\n    state.count = state.count + 1\n  },\n}\nactions =\n{\n  setCurrentAccount(context, currentAccount) {\n    context.commit('setCurrentAccount', currentAccount)\n  },\n  addAccount(context, newAccount) {\n    context.commit('addAccount', newAccount)\n  },\n  deleteAccount(context, accountName) {\n    context.commit('deleteAccount', accountName)\n  },\n  addIncomeCategory(context, newCategory) {\n    context.commit('addIncomeCategory', newCategory)\n  },\n  addExpenseCategory(context, newCategory) {\n    context.commit('addExpenseCategory', newCategory)\n  },\n  addIncome(context, newIncome) {\n    context.commit('addIncome', newIncome)\n  },\n  addExpense(context, newExpense) {\n    context.commit('addExpense', newExpense)\n  },\n  editIncome(context, editedIncome) {\n    context.commit('editIncome', editedIncome)\n  },\n  editExpense(context, editedExpense) {\n    context.commit('editExpense', editedExpense)\n  },\n  editAccount(context, accountName, editedAccount) {\n    context.commit('editAccount', accountName, editedAccount)\n  },\n  deleteIncome(context, incomeName) {\n    context.commit('deleteIncome', incomeName)\n  },\n  deleteExpense(context, expenseName) {\n    context.commit('deleteExpense', expenseName)\n  },\n  deleteIncomeCategory(context, categoryName) {\n    context.commit('deleteIncomeCategory', categoryName)\n  },\n  deleteExpenseCategory(context, categoryName) {\n    context.commit('deleteExpenseCategory', categoryName)\n  },\n  saveAllData() {\n    mutations.saveAllData()\n  },\n  eraseAllData() {\n    mutations.eraseAllData()\n  },\n}\nstate = {\n  ACCOUNTS: [],\n  EXPENSE_CATEGORIES: [{ name: 'Add...' },\n    { name: 'Expenses' }, { name: 'Transference' }, { name: 'Other' }],\n  INCOME_CATEGORIES: [{ name: 'Add...' },\n    { name: 'Salary' }, { name: 'Other' }],\n  INCOMES: [],\n  EXPENSES: [],\n  CURRENT_ITEM: { name: '' },\n  CURRENT_ACCOUNT: {},\n  count: 0,\n}\nstore = new vuex__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Store({\n  actions, state, mutations,\n})\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_1__[\"shallowMount\"])(_components_IncExpForm_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"], { store,\n  localVue,\n  propsData: { formType } })",
            "err": {},
            "isRoot": false,
            "uuid": "8f7933a4-5a22-4eee-b942-c9316751e1d8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "renders Name input",
            "fullTitle": "IncExpForm.vue renders Name input",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "Object(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(wrapper.find('#Name').exists())",
            "err": {},
            "isRoot": false,
            "uuid": "97e4e21d-8cf5-4076-9589-0665f19314ca",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "renders Category label",
            "fullTitle": "IncExpForm.vue renders Category label",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "Object(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(wrapper.find('#LblCategory').exists())",
            "err": {},
            "isRoot": false,
            "uuid": "850e0676-654c-451b-b3e2-a3a4f3584cfc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "renders Amount input",
            "fullTitle": "IncExpForm.vue renders Amount input",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "Object(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(wrapper.find('#Amount').exists())",
            "err": {},
            "isRoot": false,
            "uuid": "2c572fba-d273-4143-9c19-cd18ca96c0d4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "renders expense in the titles when the formType is expense",
            "fullTitle": "IncExpForm.vue renders expense in the titles when the formType is expense",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const title1 = wrapper.find('#lblName')\nconst title2 = wrapper.find('#lblCategory')\nconst title3 = wrapper.find('#lblAmount')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(title1.text()).to.equal('Expense Name')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(title2.text()).to.equal('Expense Category')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(title3.text()).to.equal('Expense Amount')",
            "err": {},
            "isRoot": false,
            "uuid": "45b505c2-d4ae-427c-b28d-83559bb70af0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Category has 4 default options",
            "fullTitle": "IncExpForm.vue Category has 4 default options",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const optionArray = wrapper.findAll('option')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(optionArray.at(0).text()).to.equal('Add...')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(optionArray.at(1).text()).to.equal('Expenses')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(optionArray.at(2).text()).to.equal('Transference')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(optionArray.at(3).text()).to.equal('Other')",
            "err": {},
            "isRoot": false,
            "uuid": "4d7eccca-1a06-446a-9fb5-230bd5c3244c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Deletes the Selected Category",
            "fullTitle": "IncExpForm.vue Deletes the Selected Category",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const deleteButton = wrapper.find('#deleteButton')\nwrapper.vm.currentCategory = 'Transference'\ndeleteButton.trigger('click')\nconst optionArray = wrapper.findAll('option')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(optionArray.length).to.equal(3)",
            "err": {},
            "isRoot": false,
            "uuid": "57fa6b49-dae1-4358-b961-80fcf1c71a16",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "97e4e21d-8cf5-4076-9589-0665f19314ca",
          "850e0676-654c-451b-b3e2-a3a4f3584cfc",
          "2c572fba-d273-4143-9c19-cd18ca96c0d4",
          "45b505c2-d4ae-427c-b28d-83559bb70af0",
          "4d7eccca-1a06-446a-9fb5-230bd5c3244c",
          "57fa6b49-dae1-4358-b961-80fcf1c71a16"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 31,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2f46db99-2a0a-435b-9b81-6d3ebcdede3b",
        "title": "reportes.vue",
        "fullFile": "C:\\Users\\joaquin\\Desktop\\Certificacion1\\CertiFinal\\dist\\main.js",
        "file": "\\dist\\main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "reportes.vue \"before each\" hook",
            "timedOut": false,
            "duration": 15,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mutations = {\n  setCurrentAccount(context, currentAccount) {\n    context.CURRENT_ACCOUNT = currentAccount\n  },\n  addAccount(context, newAccount) {\n    context.ACCOUNTS.push(newAccount)\n  },\n  deleteAccount(context, accountId) {\n    context.ACCOUNTS.forEach(function(element) {\n      const indexofElement = context.ACCOUNTS.indexOf(element)\n      if (element.id === accountId) {\n        context.ACCOUNTS.splice(indexofElement, 1)\n      }\n    })\n  },\n  addIncomeCategory(context, newCategory) {\n    context.INCOME_CATEGORIES.push(newCategory)\n  },\n  addExpenseCategory(context, newCategory) {\n    context.EXPENSE_CATEGORIES.push(newCategory)\n  },\n  addExpense(context, newExpense) {\n    context.EXPENSES.push(newExpense)\n  },\n  addIncome(context, newIncome) {\n    context.INCOMES.push(newIncome)\n  },\n  editIncome(context, editedIncome) {\n    console.log(editedIncome)\n    context.INCOMES.forEach(\n        function(element) {\n          const indexofElement = context.INCOMES.indexOf(element)\n          if (element.name === editedIncome.oldName) {\n            context.INCOMES[indexofElement].name = editedIncome.name\n            context.INCOMES[indexofElement].category = editedIncome.category\n            context.INCOMES[indexofElement].amount = editedIncome.amount\n          }\n        })\n  },\n  editExpense(context, editedExpense) {\n    context.EXPENSES.forEach(\n        function(element) {\n          const indexofElement = context.EXPENSES.indexOf(element)\n          if (element.name === editedExpense.oldName) {\n            context.EXPENSES[indexofElement].name = editedExpense.name\n            context.EXPENSES[indexofElement].category =\n            editedExpense.category\n            context.EXPENSES[indexofElement].amount = editedExpense.amount\n          }\n        })\n  },\n  editAccount(context, accountName, editedAccount) {\n    context.ACCOUNTS.forEach(\n        function(element) {\n          const indexofElement = context.ACCOUNTS.indexOf(element)\n          if (element.name === accountName) {\n            context.ACCOUNTS[indexofElement].name = editedAccount.name\n            context.ACCOUNTS[indexofElement].description =\n            editedAccount.description\n          }\n        })\n  },\n  deleteIncome(context, incomeName) {\n    context.INCOMES.forEach(\n        function(element) {\n          const indexofElement = context.INCOME_CATEGORIES.indexOf(element)\n          if (element.name === incomeName) {\n            context.INCOMES.splice(indexofElement, 1)\n          }\n        }\n    )\n  },\n  deleteExpense(context, expenseName) {\n    context.EXPENSES.forEach(\n        function(element) {\n          const indexofElement = context.EXPENSES.indexOf(element)\n          if (element.name === expenseName) {\n            context.EXPENSES.splice(indexofElement, 1)\n          }\n        }\n    )\n  },\n  deleteIncomeCategory(context, categoryName) {\n    context.INCOME_CATEGORIES.forEach(\n        function(element) {\n          const indexofElement = context.INCOME_CATEGORIES.indexOf(element)\n          if (element.name === categoryName) {\n            context.INCOME_CATEGORIES.splice(indexofElement, 1)\n          }\n        }\n    )\n  },\n  deleteExpenseCategory(context, categoryName) {\n    context.EXPENSE_CATEGORIES.forEach(\n        function(element) {\n          const indexofElement = context.EXPENSE_CATEGORIES.indexOf(element)\n          if (element.name === categoryName) {\n            context.EXPENSE_CATEGORIES.splice(indexofElement, 1)\n          }\n        }\n    )\n  },\n  saveAllData() {\n    window.localStorage.clear()\n    window.localStorage.setItem('storage', JSON.stringify(state))\n    console.log(window.localStorage.length)\n  },\n  eraseAllData() {\n    window.localStorage.clear()\n  },\n  increment() {\n    state.count = state.count + 1\n  },\n}\nactions =\n  {\n    setCurrentAccount(context, currentAccount) {\n      context.commit('setCurrentAccount', currentAccount)\n    },\n    addAccount(context, newAccount) {\n      context.commit('addAccount', newAccount)\n    },\n    deleteAccount(context, accountName) {\n      context.commit('deleteAccount', accountName)\n    },\n    addIncomeCategory(context, newCategory) {\n      context.commit('addIncomeCategory', newCategory)\n    },\n    addExpenseCategory(context, newCategory) {\n      context.commit('addExpenseCategory', newCategory)\n    },\n    addIncome(context, newIncome) {\n      context.commit('addIncome', newIncome)\n    },\n    addExpense(context, newExpense) {\n      context.commit('addExpense', newExpense)\n    },\n    editIncome(context, editedIncome) {\n      context.commit('editIncome', editedIncome)\n    },\n    editExpense(context, editedExpense) {\n      context.commit('editExpense', editedExpense)\n    },\n    editAccount(context, accountName, editedAccount) {\n      context.commit('editAccount', accountName, editedAccount)\n    },\n    deleteIncome(context, incomeName) {\n      context.commit('deleteIncome', incomeName)\n    },\n    deleteExpense(context, expenseName) {\n      context.commit('deleteExpense', expenseName)\n    },\n    deleteIncomeCategory(context, categoryName) {\n      context.commit('deleteIncomeCategory', categoryName)\n    },\n    deleteExpenseCategory(context, categoryName) {\n      context.commit('deleteExpenseCategory', categoryName)\n    },\n    saveAllData() {\n      mutations.saveAllData()\n    },\n    eraseAllData() {\n      mutations.eraseAllData()\n    },\n  }\nstate = {\n  ACCOUNTS: [],\n  EXPENSE_CATEGORIES: [{ name: 'Add...' }, { name: 'Expenses' },\n    { name: 'Transference' }, { name: 'Other' }],\n  INCOME_CATEGORIES: [{ name: 'Add...' }, { name: 'Salary' },\n    { name: 'Other' }],\n  INCOMES: [],\n  EXPENSES: [],\n  CURRENT_ITEM: { name: '' },\n  CURRENT_ACCOUNT: {},\n  count: 0,\n}\nstore = new vuex__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Store({\n  actions, state, mutations,\n})\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_1__[\"shallowMount\"])(_views_reportes_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"], { store, localVue })",
            "err": {},
            "isRoot": false,
            "uuid": "73912611-3d93-4e2d-bddd-754c33c00717",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "buttons add, edit, delete in Ingresos",
            "fullTitle": "reportes.vue buttons add, edit, delete in Ingresos",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const buttonArray = wrapper.findAll('b-button')\nconst firstButton = buttonArray.at(0)\nconst secondButton = buttonArray.at(1)\nconst thirdButton = buttonArray.at(2)\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(buttonArray.length).to.equal(6)\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(firstButton.text()).to.equal('Add')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(secondButton.text()).to.equal('Edit')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(thirdButton.text()).to.equal('Delete')",
            "err": {},
            "isRoot": false,
            "uuid": "a5df34e1-a315-45b1-b904-dabdce835b8c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Table has 4 columns: name, category, amount, date",
            "fullTitle": "reportes.vue Table has 4 columns: name, category, amount, date",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const fieldArray = wrapper.vm.fields\nconst firstColumn = fieldArray[0]\nconst secondColumn = fieldArray[1]\nconst thirdColumn = fieldArray[2]\nconst fourthColumn = fieldArray[3]\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(fieldArray.length).to.equal(4)\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(firstColumn).to.equal('name')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(secondColumn).to.equal('category')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(thirdColumn).to.equal('amount')\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(fourthColumn).to.equal('date')",
            "err": {},
            "isRoot": false,
            "uuid": "8660f799-066f-41c5-bd40-b8bc0c9da8dd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Ensure that there is no data",
            "fullTitle": "reportes.vue Ensure that there is no data",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const itemArray = wrapper.vm.items\nObject(chai__WEBPACK_IMPORTED_MODULE_0__[\"expect\"])(itemArray.length).to.equal(0)",
            "err": {},
            "isRoot": false,
            "uuid": "e64e936c-b4c3-48e9-8306-25f793525e37",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a5df34e1-a315-45b1-b904-dabdce835b8c",
          "8660f799-066f-41c5-bd40-b8bc0c9da8dd",
          "e64e936c-b4c3-48e9-8306-25f793525e37"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}